---
title: "Data cleaning"
weight: 10
categories: [tidymass_usage]
author:
- name: Xiaotao Shen (https://www.shenxt.info/)
date: "Created on 2021-12-04 and updated on `r Sys.Date()`"
output:
  html_document:
    number_sections: true
    df_print: paged
    toc: no
  pdf_document:
    toc: no
vignette: >
  %\VignetteIndexEntry{data_cleaning}
  %\VignettePackage{tidymass}
  % \VignetteEngine{knitr::rmarkdown}
  % \usepackage[utf8]{inputenc}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE}
source(here::here("content/start/common.R"))
knitr::opts_knit$set(root.dir = here::here("content/start"))
```

# Data preparation

We just use the dataset which are from [this step](https://tidymass.github.io/tidymass/articles/explore_data.html).

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
library(tidymass)
load("data_cleaning/POS/object_pos")
load("data_cleaning/NEG/object_neg")
```
Change batch to character.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos <- 
  object_pos %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::mutate(batch = as.character(batch))

object_neg <- 
  object_neg %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::mutate(batch = as.character(batch))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg
```

# Data quality assessment before data cleaning

Here, we can use the `massqc` package to [assess the data quality](https://tidymass.github.io/massqc/).

We can just use the `massqc_report()` function to get a html format quality assessment report.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massqc::massqc_report(object = object_pos,
                      path = "data_cleaning/POS/data_quality_before_data_cleaning")
```

A html format report and pdf figures will be placed in the folder `data_cleaning/POS/data_quality_before_data_cleaning/Report`.

![](figures/Screen-Shot-3.png)

The html report is below:

![](figures/Screen-Shot-6.png)

Negative mode.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massqc::massqc_report(object = object_neg, 
                      path = "data_cleaning/NEG/data_quality_before_data_cleaning")
```

The PCA score plot is used to show the batch effect of positive and negative dataset.

Positive mode:

![](figures/Screen-Shot-4.png)
Negative mode:

![](figures/Screen-Shot-5.png)

We can see that no matter in positive and negative mode, batch effect is serious.

# Remove noisy metabolic features

Remove variables which have MVs in more than 20% QC samples and in at lest 50% samples in control group or case group.

## Positive mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(group)
```
MV percentage in QC samples.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_variable_missing_values(object = object_pos %>% 
                               activate_mass_dataset(what = "sample_info") %>% 
                               filter(class == "QC"), 
                             percentage = TRUE) +
  scale_size_continuous(range = c(0.01, 2))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
qc_id =
  object_pos %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(class == "QC") %>%
  pull(sample_id)

control_id =
  object_pos %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Control") %>%
  pull(sample_id)

case_id =
  object_pos %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Case") %>%
  pull(sample_id)

object_pos =
  object_pos %>%
  mutate_variable_na_freq(according_to_samples = qc_id) %>%
  mutate_variable_na_freq(according_to_samples = control_id) %>%
  mutate_variable_na_freq(according_to_samples = case_id)

head(extract_variable_info(object_pos))
```

Remove variables.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos <- 
  object_pos %>% 
  activate_mass_dataset(what = "variable_info") %>%
  filter(na_freq < 0.2 & (na_freq.1 < 0.5 | na_freq.2 < 0.5))
object_pos
```

Only 5,101 variables left.

## Negative mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(group)
```

MV percentage in QC samples.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_variable_missing_values(object = object_neg %>% 
                               activate_mass_dataset(what = "sample_info") %>% 
                               filter(class == "QC"), 
                             percentage = TRUE) +
  scale_size_continuous(range = c(0.01, 2))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
qc_id =
  object_neg %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(class == "QC") %>%
  pull(sample_id)

control_id =
  object_neg %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Control") %>%
  pull(sample_id)

case_id =
  object_neg %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Case") %>%
  pull(sample_id)

object_neg =
  object_neg %>%
  mutate_variable_na_freq(according_to_samples = qc_id) %>%
  mutate_variable_na_freq(according_to_samples = control_id) %>%
  mutate_variable_na_freq(according_to_samples = case_id)

head(extract_variable_info(object_neg))
```

Remove variables.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg <- 
  object_neg %>% 
  activate_mass_dataset(what = "variable_info") %>%
  filter(na_freq < 0.2 & (na_freq.1 < 0.5 | na_freq.2 < 0.5))
object_neg
```
4104 features left.


# Filter outlier samples

We can use the `detect_outlier()` to find the outlier samples.

More information about how to detect outlier samples can be found [here](https://privefl.github.io/blog/detecting-outlier-samples-in-pca/).

## Positive mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massdataset::show_sample_missing_values(object = object_pos,
                                        color_by = "group",
                                        order_by = "injection.order",
                                        percentage = TRUE) +
  theme(axis.text.x = element_text(size = 2)) +
  scale_size_continuous(range = c(0.1, 2)) +
  ggsci::scale_color_aaas()
```

Detect outlier samples.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
outlier_samples =
  object_pos %>%
  `+`(1) %>% 
  log(2) %>%
  scale() %>%
  detect_outlier()

outlier_samples
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}

outlier_table <-
extract_outlier_table(outlier_samples)

outlier_table %>% 
  head()

outlier_table %>% 
  apply(1, function(x){
    sum(x)
  }) %>% 
  `>`(0) %>% 
  which()
```

No outlier samples in positive mode.

## Negative mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massdataset::show_sample_missing_values(object = object_neg,
                                        color_by = "group",
                                        order_by = "injection.order",
                                        percentage = TRUE) +
  theme(axis.text.x = element_text(size = 2)) +
  scale_size_continuous(range = c(0.1, 2)) +
  ggsci::scale_color_aaas()
```

Detect outlier samples.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
outlier_samples =
  object_neg %>%
  `+`(1) %>% 
  log(2) %>%
  scale() %>%
  detect_outlier()

outlier_samples
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}

outlier_table <-
extract_outlier_table(outlier_samples)

outlier_table %>% 
  head()

outlier_table %>% 
  apply(1, function(x){
    sum(x)
  }) %>% 
  `>`(0) %>% 
  which()
```

No outlier samples in negative mode.

## Missing value imputation

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object_pos)
object_pos <- 
  impute_mv(object = object_pos, method = "knn")

get_mv_number(object_pos)
```


```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object_neg)

object_neg <- 
  impute_mv(object = object_neg, method = "knn")

get_mv_number(object_neg)
```

## Data normalization and integration

## Positive mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos <- 
  normalize_data(object_pos, method = "median")

object_pos2 <- 
  integrate_data(object_pos, method = "subject_median")
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos2 %>% 
  `+`(1) %>% 
  log(2) %>% 
  massqc::massqc_pca(color_by = "batch", line = FALSE)
```

## Negative mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg <- 
  normalize_data(object_neg, method = "median")

object_neg2 <- 
  integrate_data(object_neg, method = "subject_median")
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg2 %>% 
  `+`(1) %>% 
  log(2) %>% 
  massqc::massqc_pca(color_by = "batch", line = FALSE)
```

Save data for subsequent analysis.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
save(object_pos2, file = "data_cleaning/POS/object_pos2")
save(object_neg2, file = "data_cleaning/NEG/object_neg2")
```

# Session information

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
sessionInfo()
```
