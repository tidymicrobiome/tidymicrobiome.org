---
title: "Whole workflow using tidymass"
weight: 14
author:
- name: Xiaotao Shen (https://www.shenxt.info/)
date: "Created on 2022-02-18 and updated on `r Sys.Date()`"
output:
  html_document:
    number_sections: true
    df_print: paged
    toc: yes
  pdf_document:
    toc: no
vignette: >
  %\VignetteIndexEntry{whole workflow}
  %\VignettePackage{tidymass}
  % \VignetteEngine{knitr::rmarkdown}
  % \usepackage[utf8]{inputenc}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE, echo=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warning = FALSE,
  message = TRUE,
  out.width = "100%"
)
knitr::opts_knit$set(root.dir = here::here("content/start"))
```

# Data preparation

Download the demo data and [refer this article](https://tidymass.github.io/tidymass/articles/demo_data.html).

We have positive and negative mode. For each mode, we have `control`, `case` and `QC` groups. Control group have 110 samples, and case group have 110 samples as well.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
library(tidymass)
library(tidyverse)
```

![](figures/fig10.png)

---

# Raw data processing

`massprocesser` package is used to do the raw data processing. Please refer this [website](https://massprocesser.tidymass.org/).

## Positive mode

The code used to do raw data processing.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
process_data(
  path = "mzxml_ms1_data/POS",
  polarity = "positive",
  ppm = 10,
  peakwidth = c(10, 60),
  threads = 4,
  output_tic = FALSE,
  output_bpc = FALSE,
  output_rt_correction_plot = FALSE,
  min_fraction = 0.5,
  group_for_figure = "QC"
)
```

All the results will be placed in the folder named `mzxml_ms1_data/POS/Result`. More information about that can be found [here](https://tidymass.github.io/massprocesser/articles/raw_data_processing.html).

![](figures/fig1.png)

You can just load the `object`, which is a `mass_dataset` class object.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("mzxml_ms1_data/POS/Result/object")
object
```

We can see that there are 10,149 metabolic features in positive mode.

![](figures/fig2.png)

You can use the `plot_adjusted_rt()` function to get the interactive plot.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("mzxml_ms1_data/POS/Result/intermediate_data/xdata2")
####set the group_for_figure if you want to show specific groups. 
####And set it as "all" if you want to show all samples.
plot <-
massprocesser::plot_adjusted_rt(object = xdata2, 
                 group_for_figure = "QC", 
                 interactive = TRUE)
plot
```

## Negative mode

The processing of negative mode is same with positive mode data.

Same with positive mode, change `polarity` to `negative`.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massprocesser::process_data(
  path = "mzxml_ms1_data/NEG",
  polarity = "negative",
  ppm = 10,
  peakwidth = c(10, 60),
  threads = 4,
  output_tic = FALSE,
  output_bpc = FALSE,
  output_rt_correction_plot = FALSE,
  min_fraction = 0.5,
  group_for_figure = "QC"
)
```

Same with positive mode.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("mzxml_ms1_data/NEG/Result/object")
object
```

We can see that there are 8,804 metabolic features in negative mode.

# Explore data

After the [`raw data processing`](https://tidymass.github.io/tidymass/articles/raw_data_processing.html), peak tables for positive and negative mode will be generated. 

## Positive mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("mzxml_ms1_data/POS/Result/object")
object_pos <- object
object_pos
```

Read sample information.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
sample_info_pos <- readr::read_csv("sample_info/sample_info_pos.csv")
head(sample_info_pos)
```

Add `sample_info_pos` to `object_pos`

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos %>% 
  extract_sample_info() %>% 
  head()

object_pos <- 
  object_pos %>% 
  activate_mass_dataset(what = "sample_info") %>%
  dplyr::select(-c("group", "class", "injection.order"))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos <-
  object_pos %>%
  activate_mass_dataset(what = "sample_info") %>%
  left_join(sample_info_pos,
            by = "sample_id")

object_pos %>% 
  extract_sample_info() %>% 
  head()
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
dim(object_pos)
object_pos %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(class)

object_pos %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(group)

object_pos %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(batch)
```
So for positive mode, we have 259 samples and 10149 variables. 220 subject samples and 39 QC samples. 110 control samples and 110 case samples. Two batches in total, 112 samples in batch 1 and 147 in batch 2.

Next, we can get the peak distributation plot of positive mode.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos %>%
  `+`(1) %>% 
  log(10) %>%
  show_mz_rt_plot() +
  scale_size_continuous(range = c(0.01, 2))
```

We can explore the missing values in positive mode data.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object = object_pos)
```

785,821 mvs in total.

Missing value number in each sample.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object = object_pos, by = "variable") %>% 
  head()
```

Missing value number in each variable.

We can use the figure to show the missing value information.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_missing_values(object = object_pos, 
                    show_column_names = FALSE, percentage = TRUE)
```

Show the mvs in samples

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_sample_missing_values(object = object_pos, percentage = TRUE)
```

Show the mvs in variables

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_variable_missing_values(object = object_pos, 
                             percentage = TRUE, 
                             show_x_text = FALSE, 
                             show_x_ticks = FALSE) +
  scale_size_continuous(range = c(0.01, 1))
```

## Negative mode

Load `object`.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("mzxml_ms1_data/NEG/Result/object")
object_neg = object
object_neg
```

Read sample information.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
sample_info_neg = readr::read_csv("sample_info/sample_info_neg.csv")
head(sample_info_neg)
```

Add `sample_info_neg` to `object_neg`

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg %>% 
  extract_sample_info() %>% 
  head()

object_neg <- 
  object_neg %>% 
  activate_mass_dataset(what = "sample_info") %>%
  dplyr::select(-c("group", "class", "injection.order"))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg <-
  object_neg %>%
  activate_mass_dataset(what = "sample_info") %>%
  left_join(sample_info_neg,
            by = "sample_id")

object_neg %>% 
  extract_sample_info() %>% 
  head()
```


```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
dim(object_neg)
object_neg %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(class)

object_neg %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(group)

object_neg %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(batch)
```

So for negative mode, we have 259 samples and 8804 variables. 220 subject samples and 39 QC samples. 110 control samples and 110 case samples. Two batches in total, 112 samples in batch 1 and 147 in batch 2.

Next, we can get the peak distributation plot of negative mode.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg %>%
  `+`(1) %>% 
  log(10) %>%
  show_mz_rt_plot() +
  scale_size_continuous(range = c(0.01, 2))
```


We can explore the missing values in negitive mode data.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object = object_neg)
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object = object_neg, by = "sample") %>% 
  head()
```

Missing value number in each sample.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object = object_neg, by = "variable") %>% 
  head()
```

Missing value number in each variable.

We can use the figure to show the missing value information.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_missing_values(object = object_neg, show_column_names = FALSE, percentage = TRUE)
```

Show the mvs in samples

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_sample_missing_values(object = object_neg, percentage = TRUE)
```

Show the mvs in variables

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_variable_missing_values(object = object_neg, 
                             percentage = TRUE, 
                             show_x_text = FALSE, 
                             show_x_ticks = FALSE) +
  scale_size_continuous(range = c(0.01, 1))
```

---

# Data cleaning

## Data quality assessment before data cleaning

Change batch to character.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos <- 
  object_pos %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::mutate(batch = as.character(batch))

object_neg <- 
  object_neg %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::mutate(batch = as.character(batch))
```

Here, we can use the `massqc` package to [assess the data quality](https://tidymass.github.io/massqc/).

We can just use the `massqc_report()` function to get a html format quality assessment report.

### Positive mode

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massqc::massqc_report(object = object_pos, 
                      path = "data_cleaning/POS/data_quality_before_data_cleaning")
```

A html format report and pdf figures will be placed in the folder `data_cleaning/POS/data_quality_before_data_cleaning/Report`.

![](figures/fig3.png)

The html report is below:

![](figures/fig4.png)

### Negative mode.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massqc::massqc_report(object = object_neg, 
                      path = "data_cleaning/NEG/data_quality_before_data_cleaning")
```

The PCA score plot is used to show the batch effect of positive and negative dataset.

Positive mode:

![](figures/fig5.png)

Negative mode:

![](figures/fig6.png)


## Remove noisy metabolic features

Remove variables which have MVs in more than 20% QC samples and in at lest 50% samples in control group or case group.

### Positive mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(group)
```
MV percentage in QC samples.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_variable_missing_values(object = object_pos %>% 
                               activate_mass_dataset(what = "sample_info") %>% 
                               filter(class == "QC"), 
                             percentage = TRUE) +
  scale_size_continuous(range = c(0.01, 2))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
qc_id =
  object_pos %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(class == "QC") %>%
  pull(sample_id)

control_id =
  object_pos %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Control") %>%
  pull(sample_id)

case_id =
  object_pos %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Case") %>%
  pull(sample_id)

object_pos =
  object_pos %>%
  mutate_variable_na_freq(according_to_samples = qc_id) %>%
  mutate_variable_na_freq(according_to_samples = control_id) %>%
  mutate_variable_na_freq(according_to_samples = case_id)

head(extract_variable_info(object_pos))
```

Remove variables.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos <- 
  object_pos %>% 
  activate_mass_dataset(what = "variable_info") %>%
  filter(na_freq < 0.2 & (na_freq.1 < 0.5 | na_freq.2 < 0.5))
object_pos
```

Only 5,101 variables left.


### Negative mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg %>% 
  activate_mass_dataset(what = "sample_info") %>% 
  dplyr::count(group)
```

MV percentage in QC samples.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
show_variable_missing_values(object = object_neg %>% 
                               activate_mass_dataset(what = "sample_info") %>% 
                               filter(class == "QC"), 
                             percentage = TRUE) +
  scale_size_continuous(range = c(0.01, 2))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
qc_id =
  object_neg %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(class == "QC") %>%
  pull(sample_id)

control_id =
  object_neg %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Control") %>%
  pull(sample_id)

case_id =
  object_neg %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Case") %>%
  pull(sample_id)

object_neg =
  object_neg %>%
  mutate_variable_na_freq(according_to_samples = qc_id) %>%
  mutate_variable_na_freq(according_to_samples = control_id) %>%
  mutate_variable_na_freq(according_to_samples = case_id)

head(extract_variable_info(object_neg))
```

Remove variables.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg <- 
  object_neg %>% 
  activate_mass_dataset(what = "variable_info") %>%
  filter(na_freq < 0.2 & (na_freq.1 < 0.5 | na_freq.2 < 0.5))
object_neg
```
4,104 features left.


## Filter outlier samples

We can use the `detect_outlier()` to find the outlier samples.

More information about how to detect outlier samples can be found [here](https://privefl.github.io/blog/detecting-outlier-samples-in-pca/).

### Positive mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massdataset::show_sample_missing_values(object = object_pos,
                                        color_by = "group",
                                        order_by = "injection.order",
                                        percentage = TRUE) +
  theme(axis.text.x = element_text(size = 2)) +
  scale_size_continuous(range = c(0.1, 2)) +
  ggsci::scale_color_aaas()
```

Detect outlier samples.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
outlier_samples <-
  object_pos %>%
  `+`(1) %>% 
  log(2) %>%
  scale() %>%
  detect_outlier()

outlier_samples
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
outlier_table <-
extract_outlier_table(outlier_samples)

outlier_table %>% 
  head()

outlier_table %>% 
  apply(1, function(x){
    sum(x)
  }) %>% 
  `>`(0) %>% 
  which()
```

No outlier samples in positive mode.

### Negative mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
massdataset::show_sample_missing_values(object = object_neg,
                                        color_by = "group",
                                        order_by = "injection.order",
                                        percentage = TRUE) +
  theme(axis.text.x = element_text(size = 2)) +
  scale_size_continuous(range = c(0.1, 2)) +
  ggsci::scale_color_aaas()
```

Detect outlier samples.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
outlier_samples <-
  object_neg %>%
  `+`(1) %>% 
  log(2) %>%
  scale() %>%
  detect_outlier()

outlier_samples
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
outlier_table <-
extract_outlier_table(outlier_samples)

outlier_table %>% 
  head()

outlier_table %>% 
  apply(1, function(x){
    sum(x)
  }) %>% 
  `>`(0) %>% 
  which()
```

No outlier samples in negative mode.

## Missing value imputation

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object_pos)
object_pos <- 
  impute_mv(object = object_pos, method = "knn")

get_mv_number(object_pos)
```


```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_mv_number(object_neg)

object_neg <- 
  impute_mv(object = object_neg, method = "knn")

get_mv_number(object_neg)
```

## Data normalization and integration

### Positive mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos <- 
  normalize_data(object_pos, method = "median")

object_pos2 <- 
  integrate_data(object_pos, method = "subject_median")
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos2 %>% 
  `+`(1) %>% 
  log(2) %>% 
  massqc::massqc_pca(color_by = "batch", line = FALSE)
```

### Negative mode

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg <- 
  normalize_data(object_neg, method = "median")

object_neg2 <- 
  integrate_data(object_neg, method = "subject_median")
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg2 %>% 
  `+`(1) %>% 
  log(2) %>% 
  massqc::massqc_pca(color_by = "batch", line = FALSE)
```

---

# Metabolite annotation

## Add MS2 spectra to object

Download the [MS2 data here](https://drive.google.com/file/d/1FY3x7q5i1g3oSLaVej__ZaZ4XSX-mWBQ/view?usp=sharing).

Uncompress it.

![](figures/fig7.png)

### Positive mode

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos2 <-
  mutate_ms2(
    object = object_pos2,
    column = "rp",
    polarity = "positive",
    ms1.ms2.match.mz.tol = 15,
    ms1.ms2.match.rt.tol = 30,
    path = "mgf_ms2_data/POS"
  )
```

### Negative mode

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg2 <-
  mutate_ms2(
    object = object_neg2,
    column = "rp",
    polarity = "negative",
    ms1.ms2.match.mz.tol = 15,
    ms1.ms2.match.rt.tol = 30,
    path = "mgf_ms2_data/NEG"
  )
```

## Metabolite annotation using `metid`

Metabolite annotation is based on the [`metid` package](https://tidymass.github.io/metid/).

### Download database

We need to download MS2 database from `metid` [website](https://tidymass.github.io/metid/articles/public_databases.html).

Here we download the `Michael Snyder RPLC databases`, `Orbitrap database` and `MoNA database`. And place them in a new folder named as `metabolite_annotation`.

![](figures/fig8.png)

### Positive mode

#### Annotate features using `snyder_database_rplc0.0.3`.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("metabolite_annotation/snyder_database_rplc0.0.3.rda")
```

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos2 = 
  annotate_metabolites_mass_dataset(object = object_pos2, 
                                    ms1.match.ppm = 15, 
                                    rt.match.tol = 30, 
                                    polarity = "positive",
                                    database = snyder_database_rplc0.0.3)
```

#### Annotate features using `orbitrap_database0.0.3`.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("metabolite_annotation/orbitrap_database0.0.3.rda")
```

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos2 = 
  annotate_metabolites_mass_dataset(object = object_pos2, 
                                    ms1.match.ppm = 15, 
                                    polarity = "positive",
                                    database = orbitrap_database0.0.3)
```

#### Annotate features using `mona_database0.0.3`.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("metabolite_annotation/mona_database0.0.3.rda")
```

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos2 = 
  annotate_metabolites_mass_dataset(object = object_pos2, 
                                    ms1.match.ppm = 15, 
                                    polarity = "positive",
                                    database = mona_database0.0.3)
```

### Negative mode

#### Annotate features using `snyder_database_rplc0.0.3`.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg2 = 
  annotate_metabolites_mass_dataset(object = object_neg2, 
                                    ms1.match.ppm = 15, 
                                    rt.match.tol = 30,
                                    polarity = "negative",
                                    database = snyder_database_rplc0.0.3)
```


#### Annotate features using `orbitrap_database0.0.3`.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg2 = 
  annotate_metabolites_mass_dataset(object = object_neg2, 
                                    ms1.match.ppm = 15, 
                                    polarity = "negative",
                                    database = orbitrap_database0.0.3)
```

#### Annotate features using `mona_database0.0.3`.

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg2 = 
  annotate_metabolites_mass_dataset(object = object_neg2, 
                                    ms1.match.ppm = 15, 
                                    polarity = "negative",
                                    database = mona_database0.0.3)
```


```{r,eval=TRUE, echo=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
load("metabolite_annotation/object_pos2")
load("metabolite_annotation/object_neg2")
```

## Annotation result

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
head(extract_annotation_table(object = object_pos2))
```


```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
variable_info_pos <- 
extract_variable_info(object = object_pos2)
head(variable_info_pos)
table(variable_info_pos$Level)
table(variable_info_pos$Database)
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
ms2_plot_mass_dataset(object = object_pos2, 
                      variable_id = "M86T95_POS", 
                      database = mona_database0.0.3)
```

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
ms2_plot_mass_dataset(object = object_pos2, 
                      variable_id = "M147T54_POS", 
                      database = snyder_database_rplc0.0.3, 
                      interactive_plot = FALSE)
```
---

# Statistical analysis

## Remove the features without annotations

### Positive mode.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos2 <- 
  object_pos2 %>% 
  activate_mass_dataset(what = "annotation_table") %>% 
  filter(!is.na(Level)) %>% 
  filter(Level == 1 | Level == 2)
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_pos2
```

### Negative mode.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg2 <- 
  object_neg2 %>% 
  activate_mass_dataset(what = "annotation_table") %>% 
  filter(!is.na(Level)) %>% 
  filter(Level == 1 | Level == 2)
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object_neg2
```

## Merge data

We need to merge positive and negative mode data as one `mass_dataset` class.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
head(colnames(object_pos2))
```


```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
head(colnames(object_neg2))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object <- 
merge_mass_dataset(x = object_pos2, 
                   y = object_neg2, 
                   sample_direction = "inner",
                   variable_direction = "full", 
                   sample_by = "sample_id", 
                   variable_by = c("variable_id", "mz", "rt"))
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object
```

## Trace processing information of object

Then we can use the `report_parameters()` function to trace processing information of object.

All the analysis results will be placed in a folder named as `statistical_analysis`.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
dir.create(path = "statistical_analysis", showWarnings = FALSE)
```

```{r,eval=FALSE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
report_parameters(object = object, path = "statistical_analysis/")
```

A html format file named as `parameter_report.html` will be generated.

![](figures/fig9.png)

## Remove redundant metabolites

Remove the redundant annotated metabolites bases on `Level` and score.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object <-
  object %>% 
  activate_mass_dataset(what = "annotation_table") %>% 
  group_by(Compound.name) %>% 
  filter(Level == min(Level)) %>% 
  filter(SS == max(SS)) %>% 
  slice_head(n = 1)
```

## Differential expression metabolites

### Calculate the fold changes.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
control_sample_id =
  object %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Control") %>%
  pull(sample_id)

case_sample_id =
  object %>%
  activate_mass_dataset(what = "sample_info") %>%
  filter(group == "Case") %>%
  pull(sample_id)
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object <-
  mutate_fc(object = object, 
            control_sample_id = control_sample_id, 
            case_sample_id = case_sample_id, 
            mean_median = "mean")
```


### Calculate p values.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
object <-
  mutate_p_value(
    object = object,
    control_sample_id = control_sample_id,
    case_sample_id = case_sample_id,
    method = "t.test",
    p_adjust_methods = "BH"
  )
```

### Volcano plot.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
volcano_plot(object = object,
             add_text = TRUE,
             text_from = "Compound.name", 
             point_size_scale = "p_value") +
  scale_size_continuous(range = c(0.5, 5))
```

## Output result

Output the differential expression metabolites.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
differential_metabolites <- 
  extract_variable_info(object = object) %>% 
  filter(fc > 2 | fc < 0.5) %>% 
  filter(p_value_adjust < 0.05)

readr::write_csv(differential_metabolites, 
                 file = "statistical_analysis/differential_metabolites.csv")
```


# Pathway enrichment analysis

All the results will be placed in a folder named as `pathway_enrichment`.

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
dir.create(path = "pathway_enrichment", showWarnings = FALSE)
```

```{r message=TRUE, cache=TRUE, R.options=""}
diff_metabolites <-
  object %>% 
  activate_mass_dataset(what = "variable_info") %>% 
  filter(p_value_adjust < 0.05) %>% 
  extract_variable_info()
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
head(diff_metabolites)
```

## Load `KEGG` human pathway database

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
data("kegg_hsa_pathway", package = "metpath")
kegg_hsa_pathway
```
```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
get_pathway_class(kegg_hsa_pathway)
```

## Remove the disease pathways:

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
#get the class of pathways
pathway_class <- 
  metpath::pathway_class(kegg_hsa_pathway)
head(pathway_class)
```


```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
remain_idx <-
  pathway_class %>%
  unlist() %>%
  stringr::str_detect("Disease") %>%
  `!`() %>%
  which()

remain_idx
```


```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
pathway_database <-
  kegg_hsa_pathway[remain_idx]
pathway_database
```


## Pathway enrichment

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
kegg_id <-
  diff_metabolites$KEGG.ID 
kegg_id <-
  kegg_id[!is.na(kegg_id)]
kegg_id
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
result <- 
enrich_kegg(query_id = kegg_id, 
            query_type = "compound", 
            id_type = "KEGG",
            pathway_database = pathway_database, 
            p_cutoff = 0.05, 
            p_adjust_method = "BH", 
            threads = 3)
```

## Check the result:

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
result
```


## Plot to show pathway enrichment result

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
enrich_bar_plot(object = result,
                x_axis = "p_value",
                cutoff = 0.05)
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
enrich_scatter_plot(object = result, y_axis = "p_value", y_axis_cutoff = 0.05)
```

```{r,eval=TRUE,warning=FALSE, R.options="", message=TRUE, cache=TRUE}
enrich_network(
  object = result,
  point_size = "p_value",
  p_cutoff = 0.05,
  only_significant_pathway = TRUE
)
```

# Session information

```{r,eval=TRUE,warning=FALSE, R.options="", message=FALSE, cache=TRUE}
sessionInfo()
```
